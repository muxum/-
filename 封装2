########引入包############
import pygame, os
from pygame.locals import *
from produce_graph_astar import coordinate
from 地图示意 import MAP,MAPCROSS,MAPRANK
#########引入宏##############
######显示宏###
RUN = True
#####END#####
SIZE_SCREEN = (600, 600)  # 屏幕尺寸
######颜色
QP_C = (200, 200, 200)
WALL_COLOR = (255, 200, 220)
#####END
INF = 1000
#####迷宫尺寸
# STEP = 15  # 迷宫的阶数
X = 0  # 迷宫起始横坐标
Y = 0  # 迷宫起始纵坐标
BS = 12  # 方格尺寸
# 线宽
RWW = 2  # 迷宫线宽
####END
# man
MX_C = 3  # 勇士用于计算的横坐标
MY_C = 3  # 勇士用于计算的纵坐标
#####END
# 鬼
GX_C = 1  # 鬼用于计算的横坐标
GY_C = 0  # 鬼用于计算的纵坐标
#####END
pygame.init()
screen = pygame.display.set_mode(SIZE_SCREEN)
pygame.display.set_caption("外卖模拟系统")
# icon = pygame.image.load("o.png")
#pygame.display.set_icon(icon)
screen.fill(QP_C)
#########引入函数##################


#   先随机生成k个商家

# 画出小地图---1
def _navigation(MAP, BS, back):
    # 画网格线
    for i in range(MAPRANK):
        for j in range(MAPCROSS):
            if MAP[i][j] == INF:
                    pygame.draw.rect(screen, (255, 250, 250),
                        ((X + j*BS, Y+ i*BS), (BS, BS)),
                        0)
    # 画出顾客
    for c in coordinate:
        pygame.draw.circle(screen, (0, 255, 0),
                       (X + c[1] * BS + BS // 2, Y + c[0] * BS + BS // 2),  # 勇士
                       BS // 2,
                       0)
    # if len(back) > 12:
    #     screen.blit(pygame.font.Font('freesansbold.ttf',
    #                                  15).render(f"{back[:10]}", True, (200, 200, 200)),
    #                 (210, 605))
    #     screen.blit(pygame.font.Font('freesansbold.ttf',
    #                                  15).render(f"{back[10:]}", True, (200, 200, 200)),
    #                 (210, 620))
    # else:
    #     screen.blit(pygame.font.Font('freesansbold.ttf',
    #                                  15).render(f"{back}", True, (200, 200, 200)),
    #                 (210, 605))

    # 画出路径
    # for i in range(1, len(back)):
    #     pygame.draw.line(screen, (200, 240, 60),
    #                      (X + back[i - 1][1] * BS + BS // 2, Y + back[i - 1][0] * BS + BS // 2),
    #                      (X + back[i][1] * BS + BS // 2, Y + back[i][0] * BS + BS // 2),
    #                      5)
# 函数主体
man_path = []
while RUN:
    back = []
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            RUN = False
    # 搭建基础环境
    _navigation(MAP, BS, back)
    pygame.display.update()
    pygame.time.delay(100)
